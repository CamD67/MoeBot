// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// UserServerRank is an object representing the database table.
type UserServerRank struct {
	ID          int  `boil:"id" json:"id" toml:"id" yaml:"id"`
	ServerID    int  `boil:"server_id" json:"server_id" toml:"server_id" yaml:"server_id"`
	UserID      int  `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Rank        int  `boil:"rank" json:"rank" toml:"rank" yaml:"rank"`
	MessageSent bool `boil:"message_sent" json:"message_sent" toml:"message_sent" yaml:"message_sent"`

	R *userServerRankR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userServerRankL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserServerRankColumns = struct {
	ID          string
	ServerID    string
	UserID      string
	Rank        string
	MessageSent string
}{
	ID:          "id",
	ServerID:    "server_id",
	UserID:      "user_id",
	Rank:        "rank",
	MessageSent: "message_sent",
}

// UserServerRankRels is where relationship names are stored.
var UserServerRankRels = struct {
	Server string
	User   string
}{
	Server: "Server",
	User:   "User",
}

// userServerRankR is where relationships are stored.
type userServerRankR struct {
	Server *Server
	User   *UserProfile
}

// NewStruct creates a new relationship struct
func (*userServerRankR) NewStruct() *userServerRankR {
	return &userServerRankR{}
}

// userServerRankL is where Load methods for each relationship are stored.
type userServerRankL struct{}

var (
	userServerRankColumns               = []string{"id", "server_id", "user_id", "rank", "message_sent"}
	userServerRankColumnsWithoutDefault = []string{"server_id", "user_id"}
	userServerRankColumnsWithDefault    = []string{"id", "rank", "message_sent"}
	userServerRankPrimaryKeyColumns     = []string{"id"}
)

type (
	// UserServerRankSlice is an alias for a slice of pointers to UserServerRank.
	// This should generally be used opposed to []UserServerRank.
	UserServerRankSlice []*UserServerRank

	userServerRankQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userServerRankType                 = reflect.TypeOf(&UserServerRank{})
	userServerRankMapping              = queries.MakeStructMapping(userServerRankType)
	userServerRankPrimaryKeyMapping, _ = queries.BindMapping(userServerRankType, userServerRankMapping, userServerRankPrimaryKeyColumns)
	userServerRankInsertCacheMut       sync.RWMutex
	userServerRankInsertCache          = make(map[string]insertCache)
	userServerRankUpdateCacheMut       sync.RWMutex
	userServerRankUpdateCache          = make(map[string]updateCache)
	userServerRankUpsertCacheMut       sync.RWMutex
	userServerRankUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

// One returns a single userServerRank record from the query.
func (q userServerRankQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserServerRank, error) {
	o := &UserServerRank{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_server_rank")
	}

	return o, nil
}

// All returns all UserServerRank records from the query.
func (q userServerRankQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserServerRankSlice, error) {
	var o []*UserServerRank

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserServerRank slice")
	}

	return o, nil
}

// Count returns the count of all UserServerRank records in the query.
func (q userServerRankQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_server_rank rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userServerRankQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_server_rank exists")
	}

	return count > 0, nil
}

// Server pointed to by the foreign key.
func (o *UserServerRank) Server(mods ...qm.QueryMod) serverQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ServerID),
	}

	queryMods = append(queryMods, mods...)

	query := Servers(queryMods...)
	queries.SetFrom(query.Query, "\"server\"")

	return query
}

// User pointed to by the foreign key.
func (o *UserServerRank) User(mods ...qm.QueryMod) userProfileQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := UserProfiles(queryMods...)
	queries.SetFrom(query.Query, "\"user_profile\"")

	return query
}

// LoadServer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userServerRankL) LoadServer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserServerRank interface{}, mods queries.Applicator) error {
	var slice []*UserServerRank
	var object *UserServerRank

	if singular {
		object = maybeUserServerRank.(*UserServerRank)
	} else {
		slice = *maybeUserServerRank.(*[]*UserServerRank)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userServerRankR{}
		}
		args = append(args, object.ServerID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userServerRankR{}
			}

			for _, a := range args {
				if a == obj.ServerID {
					continue Outer
				}
			}

			args = append(args, obj.ServerID)
		}
	}

	query := NewQuery(qm.From(`server`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Server")
	}

	var resultSlice []*Server
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Server")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for server")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for server")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Server = foreign
		if foreign.R == nil {
			foreign.R = &serverR{}
		}
		foreign.R.UserServerRanks = append(foreign.R.UserServerRanks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ServerID == foreign.ID {
				local.R.Server = foreign
				if foreign.R == nil {
					foreign.R = &serverR{}
				}
				foreign.R.UserServerRanks = append(foreign.R.UserServerRanks, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userServerRankL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserServerRank interface{}, mods queries.Applicator) error {
	var slice []*UserServerRank
	var object *UserServerRank

	if singular {
		object = maybeUserServerRank.(*UserServerRank)
	} else {
		slice = *maybeUserServerRank.(*[]*UserServerRank)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userServerRankR{}
		}
		args = append(args, object.UserID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userServerRankR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)
		}
	}

	query := NewQuery(qm.From(`user_profile`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserProfile")
	}

	var resultSlice []*UserProfile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserProfile")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_profile")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_profile")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userProfileR{}
		}
		foreign.R.UserUserServerRanks = append(foreign.R.UserUserServerRanks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userProfileR{}
				}
				foreign.R.UserUserServerRanks = append(foreign.R.UserUserServerRanks, local)
				break
			}
		}
	}

	return nil
}

// SetServer of the userServerRank to the related item.
// Sets o.R.Server to related.
// Adds o to related.R.UserServerRanks.
func (o *UserServerRank) SetServer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Server) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_server_rank\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"server_id"}),
		strmangle.WhereClause("\"", "\"", 2, userServerRankPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ServerID = related.ID
	if o.R == nil {
		o.R = &userServerRankR{
			Server: related,
		}
	} else {
		o.R.Server = related
	}

	if related.R == nil {
		related.R = &serverR{
			UserServerRanks: UserServerRankSlice{o},
		}
	} else {
		related.R.UserServerRanks = append(related.R.UserServerRanks, o)
	}

	return nil
}

// SetUser of the userServerRank to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserUserServerRanks.
func (o *UserServerRank) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserProfile) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_server_rank\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userServerRankPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userServerRankR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userProfileR{
			UserUserServerRanks: UserServerRankSlice{o},
		}
	} else {
		related.R.UserUserServerRanks = append(related.R.UserUserServerRanks, o)
	}

	return nil
}

// UserServerRanks retrieves all the records using an executor.
func UserServerRanks(mods ...qm.QueryMod) userServerRankQuery {
	mods = append(mods, qm.From("\"user_server_rank\""))
	return userServerRankQuery{NewQuery(mods...)}
}

// FindUserServerRank retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserServerRank(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*UserServerRank, error) {
	userServerRankObj := &UserServerRank{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_server_rank\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userServerRankObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_server_rank")
	}

	return userServerRankObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserServerRank) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_server_rank provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(userServerRankColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userServerRankInsertCacheMut.RLock()
	cache, cached := userServerRankInsertCache[key]
	userServerRankInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userServerRankColumns,
			userServerRankColumnsWithDefault,
			userServerRankColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userServerRankType, userServerRankMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userServerRankType, userServerRankMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_server_rank\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_server_rank\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_server_rank")
	}

	if !cached {
		userServerRankInsertCacheMut.Lock()
		userServerRankInsertCache[key] = cache
		userServerRankInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the UserServerRank.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserServerRank) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	userServerRankUpdateCacheMut.RLock()
	cache, cached := userServerRankUpdateCache[key]
	userServerRankUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userServerRankColumns,
			userServerRankPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_server_rank, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_server_rank\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userServerRankPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userServerRankType, userServerRankMapping, append(wl, userServerRankPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_server_rank row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_server_rank")
	}

	if !cached {
		userServerRankUpdateCacheMut.Lock()
		userServerRankUpdateCache[key] = cache
		userServerRankUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q userServerRankQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_server_rank")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_server_rank")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserServerRankSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userServerRankPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_server_rank\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userServerRankPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userServerRank slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userServerRank")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserServerRank) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_server_rank provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(userServerRankColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userServerRankUpsertCacheMut.RLock()
	cache, cached := userServerRankUpsertCache[key]
	userServerRankUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userServerRankColumns,
			userServerRankColumnsWithDefault,
			userServerRankColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userServerRankColumns,
			userServerRankPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert user_server_rank, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userServerRankPrimaryKeyColumns))
			copy(conflict, userServerRankPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_server_rank\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userServerRankType, userServerRankMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userServerRankType, userServerRankMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_server_rank")
	}

	if !cached {
		userServerRankUpsertCacheMut.Lock()
		userServerRankUpsertCache[key] = cache
		userServerRankUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single UserServerRank record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserServerRank) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserServerRank provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userServerRankPrimaryKeyMapping)
	sql := "DELETE FROM \"user_server_rank\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_server_rank")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_server_rank")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userServerRankQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userServerRankQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_server_rank")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_server_rank")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserServerRankSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserServerRank slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userServerRankPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_server_rank\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userServerRankPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userServerRank slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_server_rank")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserServerRank) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserServerRank(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserServerRankSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserServerRankSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userServerRankPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_server_rank\".* FROM \"user_server_rank\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userServerRankPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserServerRankSlice")
	}

	*o = slice

	return nil
}

// UserServerRankExists checks if the UserServerRank row exists.
func UserServerRankExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_server_rank\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_server_rank exists")
	}

	return exists, nil
}
