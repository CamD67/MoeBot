// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// ChannelRotation is an object representing the database table.
type ChannelRotation struct {
	OperationID       int    `boil:"operation_id" json:"operation_id" toml:"operation_id" yaml:"operation_id"`
	CurrentChannelUID string `boil:"current_channel_uid" json:"current_channel_uid" toml:"current_channel_uid" yaml:"current_channel_uid"`
	ChannelUids       string `boil:"channel_uids" json:"channel_uids" toml:"channel_uids" yaml:"channel_uids"`

	R *channelRotationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L channelRotationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ChannelRotationColumns = struct {
	OperationID       string
	CurrentChannelUID string
	ChannelUids       string
}{
	OperationID:       "operation_id",
	CurrentChannelUID: "current_channel_uid",
	ChannelUids:       "channel_uids",
}

// ChannelRotationRels is where relationship names are stored.
var ChannelRotationRels = struct {
	Operation string
}{
	Operation: "Operation",
}

// channelRotationR is where relationships are stored.
type channelRotationR struct {
	Operation *ScheduledOperation
}

// NewStruct creates a new relationship struct
func (*channelRotationR) NewStruct() *channelRotationR {
	return &channelRotationR{}
}

// channelRotationL is where Load methods for each relationship are stored.
type channelRotationL struct{}

var (
	channelRotationColumns               = []string{"operation_id", "current_channel_uid", "channel_uids"}
	channelRotationColumnsWithoutDefault = []string{"operation_id", "current_channel_uid", "channel_uids"}
	channelRotationColumnsWithDefault    = []string{}
	channelRotationPrimaryKeyColumns     = []string{"operation_id"}
)

type (
	// ChannelRotationSlice is an alias for a slice of pointers to ChannelRotation.
	// This should generally be used opposed to []ChannelRotation.
	ChannelRotationSlice []*ChannelRotation

	channelRotationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	channelRotationType                 = reflect.TypeOf(&ChannelRotation{})
	channelRotationMapping              = queries.MakeStructMapping(channelRotationType)
	channelRotationPrimaryKeyMapping, _ = queries.BindMapping(channelRotationType, channelRotationMapping, channelRotationPrimaryKeyColumns)
	channelRotationInsertCacheMut       sync.RWMutex
	channelRotationInsertCache          = make(map[string]insertCache)
	channelRotationUpdateCacheMut       sync.RWMutex
	channelRotationUpdateCache          = make(map[string]updateCache)
	channelRotationUpsertCacheMut       sync.RWMutex
	channelRotationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

// One returns a single channelRotation record from the query.
func (q channelRotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ChannelRotation, error) {
	o := &ChannelRotation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for channel_rotation")
	}

	return o, nil
}

// All returns all ChannelRotation records from the query.
func (q channelRotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (ChannelRotationSlice, error) {
	var o []*ChannelRotation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ChannelRotation slice")
	}

	return o, nil
}

// Count returns the count of all ChannelRotation records in the query.
func (q channelRotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count channel_rotation rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q channelRotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if channel_rotation exists")
	}

	return count > 0, nil
}

// Operation pointed to by the foreign key.
func (o *ChannelRotation) Operation(mods ...qm.QueryMod) scheduledOperationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.OperationID),
	}

	queryMods = append(queryMods, mods...)

	query := ScheduledOperations(queryMods...)
	queries.SetFrom(query.Query, "\"scheduled_operation\"")

	return query
}

// LoadOperation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (channelRotationL) LoadOperation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChannelRotation interface{}, mods queries.Applicator) error {
	var slice []*ChannelRotation
	var object *ChannelRotation

	if singular {
		object = maybeChannelRotation.(*ChannelRotation)
	} else {
		slice = *maybeChannelRotation.(*[]*ChannelRotation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &channelRotationR{}
		}
		args = append(args, object.OperationID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &channelRotationR{}
			}

			for _, a := range args {
				if a == obj.OperationID {
					continue Outer
				}
			}

			args = append(args, obj.OperationID)
		}
	}

	query := NewQuery(qm.From(`scheduled_operation`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ScheduledOperation")
	}

	var resultSlice []*ScheduledOperation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ScheduledOperation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for scheduled_operation")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for scheduled_operation")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Operation = foreign
		if foreign.R == nil {
			foreign.R = &scheduledOperationR{}
		}
		foreign.R.OperationChannelRotation = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OperationID == foreign.ID {
				local.R.Operation = foreign
				if foreign.R == nil {
					foreign.R = &scheduledOperationR{}
				}
				foreign.R.OperationChannelRotation = local
				break
			}
		}
	}

	return nil
}

// SetOperation of the channelRotation to the related item.
// Sets o.R.Operation to related.
// Adds o to related.R.OperationChannelRotation.
func (o *ChannelRotation) SetOperation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ScheduledOperation) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"channel_rotation\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"operation_id"}),
		strmangle.WhereClause("\"", "\"", 2, channelRotationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.OperationID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OperationID = related.ID
	if o.R == nil {
		o.R = &channelRotationR{
			Operation: related,
		}
	} else {
		o.R.Operation = related
	}

	if related.R == nil {
		related.R = &scheduledOperationR{
			OperationChannelRotation: o,
		}
	} else {
		related.R.OperationChannelRotation = o
	}

	return nil
}

// ChannelRotations retrieves all the records using an executor.
func ChannelRotations(mods ...qm.QueryMod) channelRotationQuery {
	mods = append(mods, qm.From("\"channel_rotation\""))
	return channelRotationQuery{NewQuery(mods...)}
}

// FindChannelRotation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindChannelRotation(ctx context.Context, exec boil.ContextExecutor, operationID int, selectCols ...string) (*ChannelRotation, error) {
	channelRotationObj := &ChannelRotation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"channel_rotation\" where \"operation_id\"=$1", sel,
	)

	q := queries.Raw(query, operationID)

	err := q.Bind(ctx, exec, channelRotationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from channel_rotation")
	}

	return channelRotationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ChannelRotation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no channel_rotation provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(channelRotationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	channelRotationInsertCacheMut.RLock()
	cache, cached := channelRotationInsertCache[key]
	channelRotationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			channelRotationColumns,
			channelRotationColumnsWithDefault,
			channelRotationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(channelRotationType, channelRotationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(channelRotationType, channelRotationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"channel_rotation\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"channel_rotation\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into channel_rotation")
	}

	if !cached {
		channelRotationInsertCacheMut.Lock()
		channelRotationInsertCache[key] = cache
		channelRotationInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the ChannelRotation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ChannelRotation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	channelRotationUpdateCacheMut.RLock()
	cache, cached := channelRotationUpdateCache[key]
	channelRotationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			channelRotationColumns,
			channelRotationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update channel_rotation, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"channel_rotation\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, channelRotationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(channelRotationType, channelRotationMapping, append(wl, channelRotationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update channel_rotation row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for channel_rotation")
	}

	if !cached {
		channelRotationUpdateCacheMut.Lock()
		channelRotationUpdateCache[key] = cache
		channelRotationUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q channelRotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for channel_rotation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for channel_rotation")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ChannelRotationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), channelRotationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"channel_rotation\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, channelRotationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in channelRotation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all channelRotation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ChannelRotation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no channel_rotation provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(channelRotationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	channelRotationUpsertCacheMut.RLock()
	cache, cached := channelRotationUpsertCache[key]
	channelRotationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			channelRotationColumns,
			channelRotationColumnsWithDefault,
			channelRotationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			channelRotationColumns,
			channelRotationPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert channel_rotation, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(channelRotationPrimaryKeyColumns))
			copy(conflict, channelRotationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"channel_rotation\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(channelRotationType, channelRotationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(channelRotationType, channelRotationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert channel_rotation")
	}

	if !cached {
		channelRotationUpsertCacheMut.Lock()
		channelRotationUpsertCache[key] = cache
		channelRotationUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single ChannelRotation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ChannelRotation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ChannelRotation provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), channelRotationPrimaryKeyMapping)
	sql := "DELETE FROM \"channel_rotation\" WHERE \"operation_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from channel_rotation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for channel_rotation")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q channelRotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no channelRotationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from channel_rotation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for channel_rotation")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ChannelRotationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ChannelRotation slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), channelRotationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"channel_rotation\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, channelRotationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from channelRotation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for channel_rotation")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ChannelRotation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindChannelRotation(ctx, exec, o.OperationID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChannelRotationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ChannelRotationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), channelRotationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"channel_rotation\".* FROM \"channel_rotation\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, channelRotationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ChannelRotationSlice")
	}

	*o = slice

	return nil
}

// ChannelRotationExists checks if the ChannelRotation row exists.
func ChannelRotationExists(ctx context.Context, exec boil.ContextExecutor, operationID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"channel_rotation\" where \"operation_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, operationID)
	}

	row := exec.QueryRowContext(ctx, sql, operationID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if channel_rotation exists")
	}

	return exists, nil
}
