// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Server is an object representing the database table.
type Server struct {
	ID             int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	GuildUID       string      `boil:"guild_uid" json:"guild_uid" toml:"guild_uid" yaml:"guild_uid"`
	WelcomeMessage null.String `boil:"welcome_message" json:"welcome_message,omitempty" toml:"welcome_message" yaml:"welcome_message,omitempty"`
	RuleAgreement  null.String `boil:"rule_agreement" json:"rule_agreement,omitempty" toml:"rule_agreement" yaml:"rule_agreement,omitempty"`
	VeteranRank    null.Int    `boil:"veteran_rank" json:"veteran_rank,omitempty" toml:"veteran_rank" yaml:"veteran_rank,omitempty"`
	VeteranRole    null.String `boil:"veteran_role" json:"veteran_role,omitempty" toml:"veteran_role" yaml:"veteran_role,omitempty"`
	BotChannel     null.String `boil:"bot_channel" json:"bot_channel,omitempty" toml:"bot_channel" yaml:"bot_channel,omitempty"`
	Enabled        bool        `boil:"enabled" json:"enabled" toml:"enabled" yaml:"enabled"`
	WelcomeChannel null.String `boil:"welcome_channel" json:"welcome_channel,omitempty" toml:"welcome_channel" yaml:"welcome_channel,omitempty"`
	StarterRole    null.String `boil:"starter_role" json:"starter_role,omitempty" toml:"starter_role" yaml:"starter_role,omitempty"`
	BaseRole       null.String `boil:"base_role" json:"base_role,omitempty" toml:"base_role" yaml:"base_role,omitempty"`

	R *serverR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L serverL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ServerColumns = struct {
	ID             string
	GuildUID       string
	WelcomeMessage string
	RuleAgreement  string
	VeteranRank    string
	VeteranRole    string
	BotChannel     string
	Enabled        string
	WelcomeChannel string
	StarterRole    string
	BaseRole       string
}{
	ID:             "id",
	GuildUID:       "guild_uid",
	WelcomeMessage: "welcome_message",
	RuleAgreement:  "rule_agreement",
	VeteranRank:    "veteran_rank",
	VeteranRole:    "veteran_role",
	BotChannel:     "bot_channel",
	Enabled:        "enabled",
	WelcomeChannel: "welcome_channel",
	StarterRole:    "starter_role",
	BaseRole:       "base_role",
}

// ServerRels is where relationship names are stored.
var ServerRels = struct {
	Channels            string
	Roles               string
	RoleGroups          string
	ScheduledOperations string
	UserServerRanks     string
}{
	Channels:            "Channels",
	Roles:               "Roles",
	RoleGroups:          "RoleGroups",
	ScheduledOperations: "ScheduledOperations",
	UserServerRanks:     "UserServerRanks",
}

// serverR is where relationships are stored.
type serverR struct {
	Channels            ChannelSlice
	Roles               RoleSlice
	RoleGroups          RoleGroupSlice
	ScheduledOperations ScheduledOperationSlice
	UserServerRanks     UserServerRankSlice
}

// NewStruct creates a new relationship struct
func (*serverR) NewStruct() *serverR {
	return &serverR{}
}

// serverL is where Load methods for each relationship are stored.
type serverL struct{}

var (
	serverColumns               = []string{"id", "guild_uid", "welcome_message", "rule_agreement", "veteran_rank", "veteran_role", "bot_channel", "enabled", "welcome_channel", "starter_role", "base_role"}
	serverColumnsWithoutDefault = []string{"guild_uid", "welcome_message", "rule_agreement", "veteran_rank", "veteran_role", "bot_channel", "welcome_channel", "starter_role", "base_role"}
	serverColumnsWithDefault    = []string{"id", "enabled"}
	serverPrimaryKeyColumns     = []string{"id"}
)

type (
	// ServerSlice is an alias for a slice of pointers to Server.
	// This should generally be used opposed to []Server.
	ServerSlice []*Server

	serverQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	serverType                 = reflect.TypeOf(&Server{})
	serverMapping              = queries.MakeStructMapping(serverType)
	serverPrimaryKeyMapping, _ = queries.BindMapping(serverType, serverMapping, serverPrimaryKeyColumns)
	serverInsertCacheMut       sync.RWMutex
	serverInsertCache          = make(map[string]insertCache)
	serverUpdateCacheMut       sync.RWMutex
	serverUpdateCache          = make(map[string]updateCache)
	serverUpsertCacheMut       sync.RWMutex
	serverUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

// One returns a single server record from the query.
func (q serverQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Server, error) {
	o := &Server{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for server")
	}

	return o, nil
}

// All returns all Server records from the query.
func (q serverQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServerSlice, error) {
	var o []*Server

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Server slice")
	}

	return o, nil
}

// Count returns the count of all Server records in the query.
func (q serverQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count server rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q serverQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if server exists")
	}

	return count > 0, nil
}

// Channels retrieves all the channel's Channels with an executor.
func (o *Server) Channels(mods ...qm.QueryMod) channelQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"channel\".\"server_id\"=?", o.ID),
	)

	query := Channels(queryMods...)
	queries.SetFrom(query.Query, "\"channel\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"channel\".*"})
	}

	return query
}

// Roles retrieves all the role's Roles with an executor.
func (o *Server) Roles(mods ...qm.QueryMod) roleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"role\".\"server_id\"=?", o.ID),
	)

	query := Roles(queryMods...)
	queries.SetFrom(query.Query, "\"role\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"role\".*"})
	}

	return query
}

// RoleGroups retrieves all the role_group's RoleGroups with an executor.
func (o *Server) RoleGroups(mods ...qm.QueryMod) roleGroupQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"role_group\".\"server_id\"=?", o.ID),
	)

	query := RoleGroups(queryMods...)
	queries.SetFrom(query.Query, "\"role_group\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"role_group\".*"})
	}

	return query
}

// ScheduledOperations retrieves all the scheduled_operation's ScheduledOperations with an executor.
func (o *Server) ScheduledOperations(mods ...qm.QueryMod) scheduledOperationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"scheduled_operation\".\"server_id\"=?", o.ID),
	)

	query := ScheduledOperations(queryMods...)
	queries.SetFrom(query.Query, "\"scheduled_operation\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"scheduled_operation\".*"})
	}

	return query
}

// UserServerRanks retrieves all the user_server_rank's UserServerRanks with an executor.
func (o *Server) UserServerRanks(mods ...qm.QueryMod) userServerRankQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_server_rank\".\"server_id\"=?", o.ID),
	)

	query := UserServerRanks(queryMods...)
	queries.SetFrom(query.Query, "\"user_server_rank\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"user_server_rank\".*"})
	}

	return query
}

// LoadChannels allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (serverL) LoadChannels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServer interface{}, mods queries.Applicator) error {
	var slice []*Server
	var object *Server

	if singular {
		object = maybeServer.(*Server)
	} else {
		slice = *maybeServer.(*[]*Server)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &serverR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &serverR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`channel`), qm.WhereIn(`server_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load channel")
	}

	var resultSlice []*Channel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice channel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on channel")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for channel")
	}

	if singular {
		object.R.Channels = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &channelR{}
			}
			foreign.R.Server = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ServerID {
				local.R.Channels = append(local.R.Channels, foreign)
				if foreign.R == nil {
					foreign.R = &channelR{}
				}
				foreign.R.Server = local
				break
			}
		}
	}

	return nil
}

// LoadRoles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (serverL) LoadRoles(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServer interface{}, mods queries.Applicator) error {
	var slice []*Server
	var object *Server

	if singular {
		object = maybeServer.(*Server)
	} else {
		slice = *maybeServer.(*[]*Server)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &serverR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &serverR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`role`), qm.WhereIn(`server_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load role")
	}

	var resultSlice []*Role
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice role")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on role")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for role")
	}

	if singular {
		object.R.Roles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &roleR{}
			}
			foreign.R.Server = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ServerID) {
				local.R.Roles = append(local.R.Roles, foreign)
				if foreign.R == nil {
					foreign.R = &roleR{}
				}
				foreign.R.Server = local
				break
			}
		}
	}

	return nil
}

// LoadRoleGroups allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (serverL) LoadRoleGroups(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServer interface{}, mods queries.Applicator) error {
	var slice []*Server
	var object *Server

	if singular {
		object = maybeServer.(*Server)
	} else {
		slice = *maybeServer.(*[]*Server)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &serverR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &serverR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`role_group`), qm.WhereIn(`server_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load role_group")
	}

	var resultSlice []*RoleGroup
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice role_group")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on role_group")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for role_group")
	}

	if singular {
		object.R.RoleGroups = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &roleGroupR{}
			}
			foreign.R.Server = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ServerID {
				local.R.RoleGroups = append(local.R.RoleGroups, foreign)
				if foreign.R == nil {
					foreign.R = &roleGroupR{}
				}
				foreign.R.Server = local
				break
			}
		}
	}

	return nil
}

// LoadScheduledOperations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (serverL) LoadScheduledOperations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServer interface{}, mods queries.Applicator) error {
	var slice []*Server
	var object *Server

	if singular {
		object = maybeServer.(*Server)
	} else {
		slice = *maybeServer.(*[]*Server)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &serverR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &serverR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`scheduled_operation`), qm.WhereIn(`server_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load scheduled_operation")
	}

	var resultSlice []*ScheduledOperation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice scheduled_operation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on scheduled_operation")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for scheduled_operation")
	}

	if singular {
		object.R.ScheduledOperations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &scheduledOperationR{}
			}
			foreign.R.Server = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ServerID {
				local.R.ScheduledOperations = append(local.R.ScheduledOperations, foreign)
				if foreign.R == nil {
					foreign.R = &scheduledOperationR{}
				}
				foreign.R.Server = local
				break
			}
		}
	}

	return nil
}

// LoadUserServerRanks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (serverL) LoadUserServerRanks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServer interface{}, mods queries.Applicator) error {
	var slice []*Server
	var object *Server

	if singular {
		object = maybeServer.(*Server)
	} else {
		slice = *maybeServer.(*[]*Server)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &serverR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &serverR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`user_server_rank`), qm.WhereIn(`server_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_server_rank")
	}

	var resultSlice []*UserServerRank
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_server_rank")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_server_rank")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_server_rank")
	}

	if singular {
		object.R.UserServerRanks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userServerRankR{}
			}
			foreign.R.Server = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ServerID {
				local.R.UserServerRanks = append(local.R.UserServerRanks, foreign)
				if foreign.R == nil {
					foreign.R = &userServerRankR{}
				}
				foreign.R.Server = local
				break
			}
		}
	}

	return nil
}

// AddChannels adds the given related objects to the existing relationships
// of the server, optionally inserting them as new records.
// Appends related to o.R.Channels.
// Sets related.R.Server appropriately.
func (o *Server) AddChannels(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Channel) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ServerID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"channel\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"server_id"}),
				strmangle.WhereClause("\"", "\"", 2, channelPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ServerID = o.ID
		}
	}

	if o.R == nil {
		o.R = &serverR{
			Channels: related,
		}
	} else {
		o.R.Channels = append(o.R.Channels, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &channelR{
				Server: o,
			}
		} else {
			rel.R.Server = o
		}
	}
	return nil
}

// AddRoles adds the given related objects to the existing relationships
// of the server, optionally inserting them as new records.
// Appends related to o.R.Roles.
// Sets related.R.Server appropriately.
func (o *Server) AddRoles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Role) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ServerID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"role\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"server_id"}),
				strmangle.WhereClause("\"", "\"", 2, rolePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ServerID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &serverR{
			Roles: related,
		}
	} else {
		o.R.Roles = append(o.R.Roles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &roleR{
				Server: o,
			}
		} else {
			rel.R.Server = o
		}
	}
	return nil
}

// SetRoles removes all previously related items of the
// server replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Server's Roles accordingly.
// Replaces o.R.Roles with related.
// Sets related.R.Server's Roles accordingly.
func (o *Server) SetRoles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Role) error {
	query := "update \"role\" set \"server_id\" = null where \"server_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Roles {
			queries.SetScanner(&rel.ServerID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Server = nil
		}

		o.R.Roles = nil
	}
	return o.AddRoles(ctx, exec, insert, related...)
}

// RemoveRoles relationships from objects passed in.
// Removes related items from R.Roles (uses pointer comparison, removal does not keep order)
// Sets related.R.Server.
func (o *Server) RemoveRoles(ctx context.Context, exec boil.ContextExecutor, related ...*Role) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ServerID, nil)
		if rel.R != nil {
			rel.R.Server = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("server_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Roles {
			if rel != ri {
				continue
			}

			ln := len(o.R.Roles)
			if ln > 1 && i < ln-1 {
				o.R.Roles[i] = o.R.Roles[ln-1]
			}
			o.R.Roles = o.R.Roles[:ln-1]
			break
		}
	}

	return nil
}

// AddRoleGroups adds the given related objects to the existing relationships
// of the server, optionally inserting them as new records.
// Appends related to o.R.RoleGroups.
// Sets related.R.Server appropriately.
func (o *Server) AddRoleGroups(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RoleGroup) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ServerID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"role_group\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"server_id"}),
				strmangle.WhereClause("\"", "\"", 2, roleGroupPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ServerID = o.ID
		}
	}

	if o.R == nil {
		o.R = &serverR{
			RoleGroups: related,
		}
	} else {
		o.R.RoleGroups = append(o.R.RoleGroups, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &roleGroupR{
				Server: o,
			}
		} else {
			rel.R.Server = o
		}
	}
	return nil
}

// AddScheduledOperations adds the given related objects to the existing relationships
// of the server, optionally inserting them as new records.
// Appends related to o.R.ScheduledOperations.
// Sets related.R.Server appropriately.
func (o *Server) AddScheduledOperations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ScheduledOperation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ServerID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"scheduled_operation\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"server_id"}),
				strmangle.WhereClause("\"", "\"", 2, scheduledOperationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ServerID = o.ID
		}
	}

	if o.R == nil {
		o.R = &serverR{
			ScheduledOperations: related,
		}
	} else {
		o.R.ScheduledOperations = append(o.R.ScheduledOperations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &scheduledOperationR{
				Server: o,
			}
		} else {
			rel.R.Server = o
		}
	}
	return nil
}

// AddUserServerRanks adds the given related objects to the existing relationships
// of the server, optionally inserting them as new records.
// Appends related to o.R.UserServerRanks.
// Sets related.R.Server appropriately.
func (o *Server) AddUserServerRanks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserServerRank) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ServerID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_server_rank\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"server_id"}),
				strmangle.WhereClause("\"", "\"", 2, userServerRankPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ServerID = o.ID
		}
	}

	if o.R == nil {
		o.R = &serverR{
			UserServerRanks: related,
		}
	} else {
		o.R.UserServerRanks = append(o.R.UserServerRanks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userServerRankR{
				Server: o,
			}
		} else {
			rel.R.Server = o
		}
	}
	return nil
}

// Servers retrieves all the records using an executor.
func Servers(mods ...qm.QueryMod) serverQuery {
	mods = append(mods, qm.From("\"server\""))
	return serverQuery{NewQuery(mods...)}
}

// FindServer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindServer(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Server, error) {
	serverObj := &Server{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"server\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, serverObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from server")
	}

	return serverObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Server) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no server provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(serverColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	serverInsertCacheMut.RLock()
	cache, cached := serverInsertCache[key]
	serverInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			serverColumns,
			serverColumnsWithDefault,
			serverColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(serverType, serverMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(serverType, serverMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"server\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"server\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into server")
	}

	if !cached {
		serverInsertCacheMut.Lock()
		serverInsertCache[key] = cache
		serverInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Server.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Server) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	serverUpdateCacheMut.RLock()
	cache, cached := serverUpdateCache[key]
	serverUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			serverColumns,
			serverPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update server, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"server\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, serverPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(serverType, serverMapping, append(wl, serverPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update server row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for server")
	}

	if !cached {
		serverUpdateCacheMut.Lock()
		serverUpdateCache[key] = cache
		serverUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q serverQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for server")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for server")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ServerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), serverPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"server\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, serverPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in server slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all server")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Server) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no server provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(serverColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	serverUpsertCacheMut.RLock()
	cache, cached := serverUpsertCache[key]
	serverUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			serverColumns,
			serverColumnsWithDefault,
			serverColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			serverColumns,
			serverPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert server, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(serverPrimaryKeyColumns))
			copy(conflict, serverPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"server\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(serverType, serverMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(serverType, serverMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert server")
	}

	if !cached {
		serverUpsertCacheMut.Lock()
		serverUpsertCache[key] = cache
		serverUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Server record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Server) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Server provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), serverPrimaryKeyMapping)
	sql := "DELETE FROM \"server\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from server")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for server")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q serverQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no serverQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from server")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for server")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ServerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Server slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), serverPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"server\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, serverPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from server slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for server")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Server) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindServer(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ServerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ServerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), serverPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"server\".* FROM \"server\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, serverPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ServerSlice")
	}

	*o = slice

	return nil
}

// ServerExists checks if the Server row exists.
func ServerExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"server\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if server exists")
	}

	return exists, nil
}
