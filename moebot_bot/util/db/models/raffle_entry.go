// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// RaffleEntry is an object representing the database table.
type RaffleEntry struct {
	ID               int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	GuildUID         string `boil:"guild_uid" json:"guild_uid" toml:"guild_uid" yaml:"guild_uid"`
	UserUID          string `boil:"user_uid" json:"user_uid" toml:"user_uid" yaml:"user_uid"`
	RaffleType       int16  `boil:"raffle_type" json:"raffle_type" toml:"raffle_type" yaml:"raffle_type"`
	TicketCount      int    `boil:"ticket_count" json:"ticket_count" toml:"ticket_count" yaml:"ticket_count"`
	RaffleData       string `boil:"raffle_data" json:"raffle_data" toml:"raffle_data" yaml:"raffle_data"`
	LastTicketUpdate int64  `boil:"last_ticket_update" json:"last_ticket_update" toml:"last_ticket_update" yaml:"last_ticket_update"`

	R *raffleEntryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L raffleEntryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RaffleEntryColumns = struct {
	ID               string
	GuildUID         string
	UserUID          string
	RaffleType       string
	TicketCount      string
	RaffleData       string
	LastTicketUpdate string
}{
	ID:               "id",
	GuildUID:         "guild_uid",
	UserUID:          "user_uid",
	RaffleType:       "raffle_type",
	TicketCount:      "ticket_count",
	RaffleData:       "raffle_data",
	LastTicketUpdate: "last_ticket_update",
}

// RaffleEntryRels is where relationship names are stored.
var RaffleEntryRels = struct {
}{}

// raffleEntryR is where relationships are stored.
type raffleEntryR struct {
}

// NewStruct creates a new relationship struct
func (*raffleEntryR) NewStruct() *raffleEntryR {
	return &raffleEntryR{}
}

// raffleEntryL is where Load methods for each relationship are stored.
type raffleEntryL struct{}

var (
	raffleEntryColumns               = []string{"id", "guild_uid", "user_uid", "raffle_type", "ticket_count", "raffle_data", "last_ticket_update"}
	raffleEntryColumnsWithoutDefault = []string{"guild_uid", "user_uid", "raffle_type", "raffle_data"}
	raffleEntryColumnsWithDefault    = []string{"id", "ticket_count", "last_ticket_update"}
	raffleEntryPrimaryKeyColumns     = []string{"id"}
)

type (
	// RaffleEntrySlice is an alias for a slice of pointers to RaffleEntry.
	// This should generally be used opposed to []RaffleEntry.
	RaffleEntrySlice []*RaffleEntry

	raffleEntryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	raffleEntryType                 = reflect.TypeOf(&RaffleEntry{})
	raffleEntryMapping              = queries.MakeStructMapping(raffleEntryType)
	raffleEntryPrimaryKeyMapping, _ = queries.BindMapping(raffleEntryType, raffleEntryMapping, raffleEntryPrimaryKeyColumns)
	raffleEntryInsertCacheMut       sync.RWMutex
	raffleEntryInsertCache          = make(map[string]insertCache)
	raffleEntryUpdateCacheMut       sync.RWMutex
	raffleEntryUpdateCache          = make(map[string]updateCache)
	raffleEntryUpsertCacheMut       sync.RWMutex
	raffleEntryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

// One returns a single raffleEntry record from the query.
func (q raffleEntryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RaffleEntry, error) {
	o := &RaffleEntry{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for raffle_entry")
	}

	return o, nil
}

// All returns all RaffleEntry records from the query.
func (q raffleEntryQuery) All(ctx context.Context, exec boil.ContextExecutor) (RaffleEntrySlice, error) {
	var o []*RaffleEntry

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RaffleEntry slice")
	}

	return o, nil
}

// Count returns the count of all RaffleEntry records in the query.
func (q raffleEntryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count raffle_entry rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q raffleEntryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if raffle_entry exists")
	}

	return count > 0, nil
}

// RaffleEntries retrieves all the records using an executor.
func RaffleEntries(mods ...qm.QueryMod) raffleEntryQuery {
	mods = append(mods, qm.From("\"raffle_entry\""))
	return raffleEntryQuery{NewQuery(mods...)}
}

// FindRaffleEntry retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRaffleEntry(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RaffleEntry, error) {
	raffleEntryObj := &RaffleEntry{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"raffle_entry\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, raffleEntryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from raffle_entry")
	}

	return raffleEntryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RaffleEntry) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no raffle_entry provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(raffleEntryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	raffleEntryInsertCacheMut.RLock()
	cache, cached := raffleEntryInsertCache[key]
	raffleEntryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			raffleEntryColumns,
			raffleEntryColumnsWithDefault,
			raffleEntryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(raffleEntryType, raffleEntryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(raffleEntryType, raffleEntryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"raffle_entry\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"raffle_entry\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into raffle_entry")
	}

	if !cached {
		raffleEntryInsertCacheMut.Lock()
		raffleEntryInsertCache[key] = cache
		raffleEntryInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the RaffleEntry.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RaffleEntry) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	raffleEntryUpdateCacheMut.RLock()
	cache, cached := raffleEntryUpdateCache[key]
	raffleEntryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			raffleEntryColumns,
			raffleEntryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update raffle_entry, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"raffle_entry\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, raffleEntryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(raffleEntryType, raffleEntryMapping, append(wl, raffleEntryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update raffle_entry row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for raffle_entry")
	}

	if !cached {
		raffleEntryUpdateCacheMut.Lock()
		raffleEntryUpdateCache[key] = cache
		raffleEntryUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q raffleEntryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for raffle_entry")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for raffle_entry")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RaffleEntrySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), raffleEntryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"raffle_entry\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, raffleEntryPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in raffleEntry slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all raffleEntry")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RaffleEntry) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no raffle_entry provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(raffleEntryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	raffleEntryUpsertCacheMut.RLock()
	cache, cached := raffleEntryUpsertCache[key]
	raffleEntryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			raffleEntryColumns,
			raffleEntryColumnsWithDefault,
			raffleEntryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			raffleEntryColumns,
			raffleEntryPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert raffle_entry, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(raffleEntryPrimaryKeyColumns))
			copy(conflict, raffleEntryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"raffle_entry\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(raffleEntryType, raffleEntryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(raffleEntryType, raffleEntryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert raffle_entry")
	}

	if !cached {
		raffleEntryUpsertCacheMut.Lock()
		raffleEntryUpsertCache[key] = cache
		raffleEntryUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single RaffleEntry record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RaffleEntry) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RaffleEntry provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), raffleEntryPrimaryKeyMapping)
	sql := "DELETE FROM \"raffle_entry\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from raffle_entry")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for raffle_entry")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q raffleEntryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no raffleEntryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from raffle_entry")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for raffle_entry")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RaffleEntrySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RaffleEntry slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), raffleEntryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"raffle_entry\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, raffleEntryPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from raffleEntry slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for raffle_entry")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RaffleEntry) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRaffleEntry(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RaffleEntrySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RaffleEntrySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), raffleEntryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"raffle_entry\".* FROM \"raffle_entry\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, raffleEntryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RaffleEntrySlice")
	}

	*o = slice

	return nil
}

// RaffleEntryExists checks if the RaffleEntry row exists.
func RaffleEntryExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"raffle_entry\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if raffle_entry exists")
	}

	return exists, nil
}
