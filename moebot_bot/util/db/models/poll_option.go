// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// PollOption is an object representing the database table.
type PollOption struct {
	ID           int      `boil:"id" json:"id" toml:"id" yaml:"id"`
	PollID       null.Int `boil:"poll_id" json:"poll_id,omitempty" toml:"poll_id" yaml:"poll_id,omitempty"`
	ReactionID   string   `boil:"reaction_id" json:"reaction_id" toml:"reaction_id" yaml:"reaction_id"`
	ReactionName string   `boil:"reaction_name" json:"reaction_name" toml:"reaction_name" yaml:"reaction_name"`
	Description  string   `boil:"description" json:"description" toml:"description" yaml:"description"`
	Votes        int      `boil:"votes" json:"votes" toml:"votes" yaml:"votes"`

	R *pollOptionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pollOptionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PollOptionColumns = struct {
	ID           string
	PollID       string
	ReactionID   string
	ReactionName string
	Description  string
	Votes        string
}{
	ID:           "id",
	PollID:       "poll_id",
	ReactionID:   "reaction_id",
	ReactionName: "reaction_name",
	Description:  "description",
	Votes:        "votes",
}

// PollOptionRels is where relationship names are stored.
var PollOptionRels = struct {
	Poll string
}{
	Poll: "Poll",
}

// pollOptionR is where relationships are stored.
type pollOptionR struct {
	Poll *Poll
}

// NewStruct creates a new relationship struct
func (*pollOptionR) NewStruct() *pollOptionR {
	return &pollOptionR{}
}

// pollOptionL is where Load methods for each relationship are stored.
type pollOptionL struct{}

var (
	pollOptionColumns               = []string{"id", "poll_id", "reaction_id", "reaction_name", "description", "votes"}
	pollOptionColumnsWithoutDefault = []string{"poll_id", "reaction_id", "reaction_name", "description"}
	pollOptionColumnsWithDefault    = []string{"id", "votes"}
	pollOptionPrimaryKeyColumns     = []string{"id"}
)

type (
	// PollOptionSlice is an alias for a slice of pointers to PollOption.
	// This should generally be used opposed to []PollOption.
	PollOptionSlice []*PollOption

	pollOptionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pollOptionType                 = reflect.TypeOf(&PollOption{})
	pollOptionMapping              = queries.MakeStructMapping(pollOptionType)
	pollOptionPrimaryKeyMapping, _ = queries.BindMapping(pollOptionType, pollOptionMapping, pollOptionPrimaryKeyColumns)
	pollOptionInsertCacheMut       sync.RWMutex
	pollOptionInsertCache          = make(map[string]insertCache)
	pollOptionUpdateCacheMut       sync.RWMutex
	pollOptionUpdateCache          = make(map[string]updateCache)
	pollOptionUpsertCacheMut       sync.RWMutex
	pollOptionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

// One returns a single pollOption record from the query.
func (q pollOptionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PollOption, error) {
	o := &PollOption{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for poll_option")
	}

	return o, nil
}

// All returns all PollOption records from the query.
func (q pollOptionQuery) All(ctx context.Context, exec boil.ContextExecutor) (PollOptionSlice, error) {
	var o []*PollOption

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PollOption slice")
	}

	return o, nil
}

// Count returns the count of all PollOption records in the query.
func (q pollOptionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count poll_option rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q pollOptionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if poll_option exists")
	}

	return count > 0, nil
}

// Poll pointed to by the foreign key.
func (o *PollOption) Poll(mods ...qm.QueryMod) pollQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.PollID),
	}

	queryMods = append(queryMods, mods...)

	query := Polls(queryMods...)
	queries.SetFrom(query.Query, "\"poll\"")

	return query
}

// LoadPoll allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pollOptionL) LoadPoll(ctx context.Context, e boil.ContextExecutor, singular bool, maybePollOption interface{}, mods queries.Applicator) error {
	var slice []*PollOption
	var object *PollOption

	if singular {
		object = maybePollOption.(*PollOption)
	} else {
		slice = *maybePollOption.(*[]*PollOption)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollOptionR{}
		}
		args = append(args, object.PollID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollOptionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PollID) {
					continue Outer
				}
			}

			args = append(args, obj.PollID)
		}
	}

	query := NewQuery(qm.From(`poll`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Poll")
	}

	var resultSlice []*Poll
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Poll")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for poll")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for poll")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Poll = foreign
		if foreign.R == nil {
			foreign.R = &pollR{}
		}
		foreign.R.PollOptions = append(foreign.R.PollOptions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PollID, foreign.ID) {
				local.R.Poll = foreign
				if foreign.R == nil {
					foreign.R = &pollR{}
				}
				foreign.R.PollOptions = append(foreign.R.PollOptions, local)
				break
			}
		}
	}

	return nil
}

// SetPoll of the pollOption to the related item.
// Sets o.R.Poll to related.
// Adds o to related.R.PollOptions.
func (o *PollOption) SetPoll(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Poll) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"poll_option\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"poll_id"}),
		strmangle.WhereClause("\"", "\"", 2, pollOptionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PollID, related.ID)
	if o.R == nil {
		o.R = &pollOptionR{
			Poll: related,
		}
	} else {
		o.R.Poll = related
	}

	if related.R == nil {
		related.R = &pollR{
			PollOptions: PollOptionSlice{o},
		}
	} else {
		related.R.PollOptions = append(related.R.PollOptions, o)
	}

	return nil
}

// RemovePoll relationship.
// Sets o.R.Poll to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *PollOption) RemovePoll(ctx context.Context, exec boil.ContextExecutor, related *Poll) error {
	var err error

	queries.SetScanner(&o.PollID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("poll_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Poll = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PollOptions {
		if queries.Equal(o.PollID, ri.PollID) {
			continue
		}

		ln := len(related.R.PollOptions)
		if ln > 1 && i < ln-1 {
			related.R.PollOptions[i] = related.R.PollOptions[ln-1]
		}
		related.R.PollOptions = related.R.PollOptions[:ln-1]
		break
	}
	return nil
}

// PollOptions retrieves all the records using an executor.
func PollOptions(mods ...qm.QueryMod) pollOptionQuery {
	mods = append(mods, qm.From("\"poll_option\""))
	return pollOptionQuery{NewQuery(mods...)}
}

// FindPollOption retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPollOption(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*PollOption, error) {
	pollOptionObj := &PollOption{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"poll_option\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, pollOptionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from poll_option")
	}

	return pollOptionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PollOption) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no poll_option provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(pollOptionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pollOptionInsertCacheMut.RLock()
	cache, cached := pollOptionInsertCache[key]
	pollOptionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pollOptionColumns,
			pollOptionColumnsWithDefault,
			pollOptionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pollOptionType, pollOptionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pollOptionType, pollOptionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"poll_option\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"poll_option\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into poll_option")
	}

	if !cached {
		pollOptionInsertCacheMut.Lock()
		pollOptionInsertCache[key] = cache
		pollOptionInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the PollOption.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PollOption) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	pollOptionUpdateCacheMut.RLock()
	cache, cached := pollOptionUpdateCache[key]
	pollOptionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pollOptionColumns,
			pollOptionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update poll_option, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"poll_option\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, pollOptionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pollOptionType, pollOptionMapping, append(wl, pollOptionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update poll_option row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for poll_option")
	}

	if !cached {
		pollOptionUpdateCacheMut.Lock()
		pollOptionUpdateCache[key] = cache
		pollOptionUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q pollOptionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for poll_option")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for poll_option")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PollOptionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pollOptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"poll_option\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, pollOptionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in pollOption slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all pollOption")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PollOption) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no poll_option provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(pollOptionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pollOptionUpsertCacheMut.RLock()
	cache, cached := pollOptionUpsertCache[key]
	pollOptionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			pollOptionColumns,
			pollOptionColumnsWithDefault,
			pollOptionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			pollOptionColumns,
			pollOptionPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert poll_option, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(pollOptionPrimaryKeyColumns))
			copy(conflict, pollOptionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"poll_option\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(pollOptionType, pollOptionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pollOptionType, pollOptionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert poll_option")
	}

	if !cached {
		pollOptionUpsertCacheMut.Lock()
		pollOptionUpsertCache[key] = cache
		pollOptionUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single PollOption record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PollOption) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PollOption provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pollOptionPrimaryKeyMapping)
	sql := "DELETE FROM \"poll_option\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from poll_option")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for poll_option")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q pollOptionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no pollOptionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from poll_option")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for poll_option")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PollOptionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PollOption slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pollOptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"poll_option\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pollOptionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from pollOption slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for poll_option")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PollOption) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPollOption(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PollOptionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PollOptionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pollOptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"poll_option\".* FROM \"poll_option\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pollOptionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PollOptionSlice")
	}

	*o = slice

	return nil
}

// PollOptionExists checks if the PollOption row exists.
func PollOptionExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"poll_option\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if poll_option exists")
	}

	return exists, nil
}
