// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// ScheduledOperation is an object representing the database table.
type ScheduledOperation struct {
	ID                   int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	ServerID             int       `boil:"server_id" json:"server_id" toml:"server_id" yaml:"server_id"`
	Type                 int       `boil:"type" json:"type" toml:"type" yaml:"type"`
	PlannedExecutionTime time.Time `boil:"planned_execution_time" json:"planned_execution_time" toml:"planned_execution_time" yaml:"planned_execution_time"`
	ExecutionInterval    string    `boil:"execution_interval" json:"execution_interval" toml:"execution_interval" yaml:"execution_interval"`

	R *scheduledOperationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L scheduledOperationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ScheduledOperationColumns = struct {
	ID                   string
	ServerID             string
	Type                 string
	PlannedExecutionTime string
	ExecutionInterval    string
}{
	ID:                   "id",
	ServerID:             "server_id",
	Type:                 "type",
	PlannedExecutionTime: "planned_execution_time",
	ExecutionInterval:    "execution_interval",
}

// ScheduledOperationRels is where relationship names are stored.
var ScheduledOperationRels = struct {
	Server                   string
	OperationChannelRotation string
}{
	Server: "Server",
	OperationChannelRotation: "OperationChannelRotation",
}

// scheduledOperationR is where relationships are stored.
type scheduledOperationR struct {
	Server                   *Server
	OperationChannelRotation *ChannelRotation
}

// NewStruct creates a new relationship struct
func (*scheduledOperationR) NewStruct() *scheduledOperationR {
	return &scheduledOperationR{}
}

// scheduledOperationL is where Load methods for each relationship are stored.
type scheduledOperationL struct{}

var (
	scheduledOperationColumns               = []string{"id", "server_id", "type", "planned_execution_time", "execution_interval"}
	scheduledOperationColumnsWithoutDefault = []string{"server_id", "type", "execution_interval"}
	scheduledOperationColumnsWithDefault    = []string{"id", "planned_execution_time"}
	scheduledOperationPrimaryKeyColumns     = []string{"id"}
)

type (
	// ScheduledOperationSlice is an alias for a slice of pointers to ScheduledOperation.
	// This should generally be used opposed to []ScheduledOperation.
	ScheduledOperationSlice []*ScheduledOperation

	scheduledOperationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	scheduledOperationType                 = reflect.TypeOf(&ScheduledOperation{})
	scheduledOperationMapping              = queries.MakeStructMapping(scheduledOperationType)
	scheduledOperationPrimaryKeyMapping, _ = queries.BindMapping(scheduledOperationType, scheduledOperationMapping, scheduledOperationPrimaryKeyColumns)
	scheduledOperationInsertCacheMut       sync.RWMutex
	scheduledOperationInsertCache          = make(map[string]insertCache)
	scheduledOperationUpdateCacheMut       sync.RWMutex
	scheduledOperationUpdateCache          = make(map[string]updateCache)
	scheduledOperationUpsertCacheMut       sync.RWMutex
	scheduledOperationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

// One returns a single scheduledOperation record from the query.
func (q scheduledOperationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ScheduledOperation, error) {
	o := &ScheduledOperation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for scheduled_operation")
	}

	return o, nil
}

// All returns all ScheduledOperation records from the query.
func (q scheduledOperationQuery) All(ctx context.Context, exec boil.ContextExecutor) (ScheduledOperationSlice, error) {
	var o []*ScheduledOperation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ScheduledOperation slice")
	}

	return o, nil
}

// Count returns the count of all ScheduledOperation records in the query.
func (q scheduledOperationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count scheduled_operation rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q scheduledOperationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if scheduled_operation exists")
	}

	return count > 0, nil
}

// Server pointed to by the foreign key.
func (o *ScheduledOperation) Server(mods ...qm.QueryMod) serverQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ServerID),
	}

	queryMods = append(queryMods, mods...)

	query := Servers(queryMods...)
	queries.SetFrom(query.Query, "\"server\"")

	return query
}

// OperationChannelRotation pointed to by the foreign key.
func (o *ScheduledOperation) OperationChannelRotation(mods ...qm.QueryMod) channelRotationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("operation_id=?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := ChannelRotations(queryMods...)
	queries.SetFrom(query.Query, "\"channel_rotation\"")

	return query
}

// LoadServer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (scheduledOperationL) LoadServer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeScheduledOperation interface{}, mods queries.Applicator) error {
	var slice []*ScheduledOperation
	var object *ScheduledOperation

	if singular {
		object = maybeScheduledOperation.(*ScheduledOperation)
	} else {
		slice = *maybeScheduledOperation.(*[]*ScheduledOperation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &scheduledOperationR{}
		}
		args = append(args, object.ServerID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &scheduledOperationR{}
			}

			for _, a := range args {
				if a == obj.ServerID {
					continue Outer
				}
			}

			args = append(args, obj.ServerID)
		}
	}

	query := NewQuery(qm.From(`server`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Server")
	}

	var resultSlice []*Server
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Server")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for server")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for server")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Server = foreign
		if foreign.R == nil {
			foreign.R = &serverR{}
		}
		foreign.R.ScheduledOperations = append(foreign.R.ScheduledOperations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ServerID == foreign.ID {
				local.R.Server = foreign
				if foreign.R == nil {
					foreign.R = &serverR{}
				}
				foreign.R.ScheduledOperations = append(foreign.R.ScheduledOperations, local)
				break
			}
		}
	}

	return nil
}

// LoadOperationChannelRotation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (scheduledOperationL) LoadOperationChannelRotation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeScheduledOperation interface{}, mods queries.Applicator) error {
	var slice []*ScheduledOperation
	var object *ScheduledOperation

	if singular {
		object = maybeScheduledOperation.(*ScheduledOperation)
	} else {
		slice = *maybeScheduledOperation.(*[]*ScheduledOperation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &scheduledOperationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &scheduledOperationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`channel_rotation`), qm.WhereIn(`operation_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ChannelRotation")
	}

	var resultSlice []*ChannelRotation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ChannelRotation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for channel_rotation")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for channel_rotation")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OperationChannelRotation = foreign
		if foreign.R == nil {
			foreign.R = &channelRotationR{}
		}
		foreign.R.Operation = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.OperationID {
				local.R.OperationChannelRotation = foreign
				if foreign.R == nil {
					foreign.R = &channelRotationR{}
				}
				foreign.R.Operation = local
				break
			}
		}
	}

	return nil
}

// SetServer of the scheduledOperation to the related item.
// Sets o.R.Server to related.
// Adds o to related.R.ScheduledOperations.
func (o *ScheduledOperation) SetServer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Server) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"scheduled_operation\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"server_id"}),
		strmangle.WhereClause("\"", "\"", 2, scheduledOperationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ServerID = related.ID
	if o.R == nil {
		o.R = &scheduledOperationR{
			Server: related,
		}
	} else {
		o.R.Server = related
	}

	if related.R == nil {
		related.R = &serverR{
			ScheduledOperations: ScheduledOperationSlice{o},
		}
	} else {
		related.R.ScheduledOperations = append(related.R.ScheduledOperations, o)
	}

	return nil
}

// SetOperationChannelRotation of the scheduledOperation to the related item.
// Sets o.R.OperationChannelRotation to related.
// Adds o to related.R.Operation.
func (o *ScheduledOperation) SetOperationChannelRotation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ChannelRotation) error {
	var err error

	if insert {
		related.OperationID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"channel_rotation\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"operation_id"}),
			strmangle.WhereClause("\"", "\"", 2, channelRotationPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.OperationID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.OperationID = o.ID

	}

	if o.R == nil {
		o.R = &scheduledOperationR{
			OperationChannelRotation: related,
		}
	} else {
		o.R.OperationChannelRotation = related
	}

	if related.R == nil {
		related.R = &channelRotationR{
			Operation: o,
		}
	} else {
		related.R.Operation = o
	}
	return nil
}

// ScheduledOperations retrieves all the records using an executor.
func ScheduledOperations(mods ...qm.QueryMod) scheduledOperationQuery {
	mods = append(mods, qm.From("\"scheduled_operation\""))
	return scheduledOperationQuery{NewQuery(mods...)}
}

// FindScheduledOperation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindScheduledOperation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ScheduledOperation, error) {
	scheduledOperationObj := &ScheduledOperation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"scheduled_operation\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, scheduledOperationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from scheduled_operation")
	}

	return scheduledOperationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ScheduledOperation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no scheduled_operation provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(scheduledOperationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	scheduledOperationInsertCacheMut.RLock()
	cache, cached := scheduledOperationInsertCache[key]
	scheduledOperationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			scheduledOperationColumns,
			scheduledOperationColumnsWithDefault,
			scheduledOperationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(scheduledOperationType, scheduledOperationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(scheduledOperationType, scheduledOperationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"scheduled_operation\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"scheduled_operation\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into scheduled_operation")
	}

	if !cached {
		scheduledOperationInsertCacheMut.Lock()
		scheduledOperationInsertCache[key] = cache
		scheduledOperationInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the ScheduledOperation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ScheduledOperation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	scheduledOperationUpdateCacheMut.RLock()
	cache, cached := scheduledOperationUpdateCache[key]
	scheduledOperationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			scheduledOperationColumns,
			scheduledOperationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update scheduled_operation, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"scheduled_operation\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, scheduledOperationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(scheduledOperationType, scheduledOperationMapping, append(wl, scheduledOperationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update scheduled_operation row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for scheduled_operation")
	}

	if !cached {
		scheduledOperationUpdateCacheMut.Lock()
		scheduledOperationUpdateCache[key] = cache
		scheduledOperationUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q scheduledOperationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for scheduled_operation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for scheduled_operation")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ScheduledOperationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), scheduledOperationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"scheduled_operation\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, scheduledOperationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in scheduledOperation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all scheduledOperation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ScheduledOperation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no scheduled_operation provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(scheduledOperationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	scheduledOperationUpsertCacheMut.RLock()
	cache, cached := scheduledOperationUpsertCache[key]
	scheduledOperationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			scheduledOperationColumns,
			scheduledOperationColumnsWithDefault,
			scheduledOperationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			scheduledOperationColumns,
			scheduledOperationPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert scheduled_operation, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(scheduledOperationPrimaryKeyColumns))
			copy(conflict, scheduledOperationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"scheduled_operation\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(scheduledOperationType, scheduledOperationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(scheduledOperationType, scheduledOperationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert scheduled_operation")
	}

	if !cached {
		scheduledOperationUpsertCacheMut.Lock()
		scheduledOperationUpsertCache[key] = cache
		scheduledOperationUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single ScheduledOperation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ScheduledOperation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ScheduledOperation provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), scheduledOperationPrimaryKeyMapping)
	sql := "DELETE FROM \"scheduled_operation\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from scheduled_operation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for scheduled_operation")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q scheduledOperationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no scheduledOperationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from scheduled_operation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for scheduled_operation")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ScheduledOperationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ScheduledOperation slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), scheduledOperationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"scheduled_operation\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, scheduledOperationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from scheduledOperation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for scheduled_operation")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ScheduledOperation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindScheduledOperation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ScheduledOperationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ScheduledOperationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), scheduledOperationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"scheduled_operation\".* FROM \"scheduled_operation\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, scheduledOperationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ScheduledOperationSlice")
	}

	*o = slice

	return nil
}

// ScheduledOperationExists checks if the ScheduledOperation row exists.
func ScheduledOperationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"scheduled_operation\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if scheduled_operation exists")
	}

	return exists, nil
}
