// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Poll is an object representing the database table.
type Poll struct {
	ID         int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Title      string      `boil:"title" json:"title" toml:"title" yaml:"title"`
	ChannelID  int         `boil:"channel_id" json:"channel_id" toml:"channel_id" yaml:"channel_id"`
	UserUID    string      `boil:"user_uid" json:"user_uid" toml:"user_uid" yaml:"user_uid"`
	MessageUID null.String `boil:"message_uid" json:"message_uid,omitempty" toml:"message_uid" yaml:"message_uid,omitempty"`
	Open       bool        `boil:"open" json:"open" toml:"open" yaml:"open"`

	R *pollR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pollL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PollColumns = struct {
	ID         string
	Title      string
	ChannelID  string
	UserUID    string
	MessageUID string
	Open       string
}{
	ID:         "id",
	Title:      "title",
	ChannelID:  "channel_id",
	UserUID:    "user_uid",
	MessageUID: "message_uid",
	Open:       "open",
}

// PollRels is where relationship names are stored.
var PollRels = struct {
	Channel     string
	PollOptions string
}{
	Channel:     "Channel",
	PollOptions: "PollOptions",
}

// pollR is where relationships are stored.
type pollR struct {
	Channel     *Channel
	PollOptions PollOptionSlice
}

// NewStruct creates a new relationship struct
func (*pollR) NewStruct() *pollR {
	return &pollR{}
}

// pollL is where Load methods for each relationship are stored.
type pollL struct{}

var (
	pollColumns               = []string{"id", "title", "channel_id", "user_uid", "message_uid", "open"}
	pollColumnsWithoutDefault = []string{"title", "channel_id", "user_uid", "message_uid"}
	pollColumnsWithDefault    = []string{"id", "open"}
	pollPrimaryKeyColumns     = []string{"id"}
)

type (
	// PollSlice is an alias for a slice of pointers to Poll.
	// This should generally be used opposed to []Poll.
	PollSlice []*Poll

	pollQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pollType                 = reflect.TypeOf(&Poll{})
	pollMapping              = queries.MakeStructMapping(pollType)
	pollPrimaryKeyMapping, _ = queries.BindMapping(pollType, pollMapping, pollPrimaryKeyColumns)
	pollInsertCacheMut       sync.RWMutex
	pollInsertCache          = make(map[string]insertCache)
	pollUpdateCacheMut       sync.RWMutex
	pollUpdateCache          = make(map[string]updateCache)
	pollUpsertCacheMut       sync.RWMutex
	pollUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

// One returns a single poll record from the query.
func (q pollQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Poll, error) {
	o := &Poll{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for poll")
	}

	return o, nil
}

// All returns all Poll records from the query.
func (q pollQuery) All(ctx context.Context, exec boil.ContextExecutor) (PollSlice, error) {
	var o []*Poll

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Poll slice")
	}

	return o, nil
}

// Count returns the count of all Poll records in the query.
func (q pollQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count poll rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q pollQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if poll exists")
	}

	return count > 0, nil
}

// Channel pointed to by the foreign key.
func (o *Poll) Channel(mods ...qm.QueryMod) channelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ChannelID),
	}

	queryMods = append(queryMods, mods...)

	query := Channels(queryMods...)
	queries.SetFrom(query.Query, "\"channel\"")

	return query
}

// PollOptions retrieves all the poll_option's PollOptions with an executor.
func (o *Poll) PollOptions(mods ...qm.QueryMod) pollOptionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"poll_option\".\"poll_id\"=?", o.ID),
	)

	query := PollOptions(queryMods...)
	queries.SetFrom(query.Query, "\"poll_option\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"poll_option\".*"})
	}

	return query
}

// LoadChannel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pollL) LoadChannel(ctx context.Context, e boil.ContextExecutor, singular bool, maybePoll interface{}, mods queries.Applicator) error {
	var slice []*Poll
	var object *Poll

	if singular {
		object = maybePoll.(*Poll)
	} else {
		slice = *maybePoll.(*[]*Poll)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollR{}
		}
		args = append(args, object.ChannelID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollR{}
			}

			for _, a := range args {
				if a == obj.ChannelID {
					continue Outer
				}
			}

			args = append(args, obj.ChannelID)
		}
	}

	query := NewQuery(qm.From(`channel`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Channel")
	}

	var resultSlice []*Channel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Channel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for channel")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for channel")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Channel = foreign
		if foreign.R == nil {
			foreign.R = &channelR{}
		}
		foreign.R.Polls = append(foreign.R.Polls, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChannelID == foreign.ID {
				local.R.Channel = foreign
				if foreign.R == nil {
					foreign.R = &channelR{}
				}
				foreign.R.Polls = append(foreign.R.Polls, local)
				break
			}
		}
	}

	return nil
}

// LoadPollOptions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pollL) LoadPollOptions(ctx context.Context, e boil.ContextExecutor, singular bool, maybePoll interface{}, mods queries.Applicator) error {
	var slice []*Poll
	var object *Poll

	if singular {
		object = maybePoll.(*Poll)
	} else {
		slice = *maybePoll.(*[]*Poll)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pollR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pollR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`poll_option`), qm.WhereIn(`poll_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load poll_option")
	}

	var resultSlice []*PollOption
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice poll_option")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on poll_option")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for poll_option")
	}

	if singular {
		object.R.PollOptions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &pollOptionR{}
			}
			foreign.R.Poll = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.PollID) {
				local.R.PollOptions = append(local.R.PollOptions, foreign)
				if foreign.R == nil {
					foreign.R = &pollOptionR{}
				}
				foreign.R.Poll = local
				break
			}
		}
	}

	return nil
}

// SetChannel of the poll to the related item.
// Sets o.R.Channel to related.
// Adds o to related.R.Polls.
func (o *Poll) SetChannel(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Channel) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"poll\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"channel_id"}),
		strmangle.WhereClause("\"", "\"", 2, pollPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ChannelID = related.ID
	if o.R == nil {
		o.R = &pollR{
			Channel: related,
		}
	} else {
		o.R.Channel = related
	}

	if related.R == nil {
		related.R = &channelR{
			Polls: PollSlice{o},
		}
	} else {
		related.R.Polls = append(related.R.Polls, o)
	}

	return nil
}

// AddPollOptions adds the given related objects to the existing relationships
// of the poll, optionally inserting them as new records.
// Appends related to o.R.PollOptions.
// Sets related.R.Poll appropriately.
func (o *Poll) AddPollOptions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PollOption) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.PollID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"poll_option\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"poll_id"}),
				strmangle.WhereClause("\"", "\"", 2, pollOptionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.PollID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &pollR{
			PollOptions: related,
		}
	} else {
		o.R.PollOptions = append(o.R.PollOptions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &pollOptionR{
				Poll: o,
			}
		} else {
			rel.R.Poll = o
		}
	}
	return nil
}

// SetPollOptions removes all previously related items of the
// poll replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Poll's PollOptions accordingly.
// Replaces o.R.PollOptions with related.
// Sets related.R.Poll's PollOptions accordingly.
func (o *Poll) SetPollOptions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PollOption) error {
	query := "update \"poll_option\" set \"poll_id\" = null where \"poll_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.PollOptions {
			queries.SetScanner(&rel.PollID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Poll = nil
		}

		o.R.PollOptions = nil
	}
	return o.AddPollOptions(ctx, exec, insert, related...)
}

// RemovePollOptions relationships from objects passed in.
// Removes related items from R.PollOptions (uses pointer comparison, removal does not keep order)
// Sets related.R.Poll.
func (o *Poll) RemovePollOptions(ctx context.Context, exec boil.ContextExecutor, related ...*PollOption) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.PollID, nil)
		if rel.R != nil {
			rel.R.Poll = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("poll_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.PollOptions {
			if rel != ri {
				continue
			}

			ln := len(o.R.PollOptions)
			if ln > 1 && i < ln-1 {
				o.R.PollOptions[i] = o.R.PollOptions[ln-1]
			}
			o.R.PollOptions = o.R.PollOptions[:ln-1]
			break
		}
	}

	return nil
}

// Polls retrieves all the records using an executor.
func Polls(mods ...qm.QueryMod) pollQuery {
	mods = append(mods, qm.From("\"poll\""))
	return pollQuery{NewQuery(mods...)}
}

// FindPoll retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPoll(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Poll, error) {
	pollObj := &Poll{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"poll\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, pollObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from poll")
	}

	return pollObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Poll) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no poll provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(pollColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pollInsertCacheMut.RLock()
	cache, cached := pollInsertCache[key]
	pollInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pollColumns,
			pollColumnsWithDefault,
			pollColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pollType, pollMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pollType, pollMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"poll\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"poll\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into poll")
	}

	if !cached {
		pollInsertCacheMut.Lock()
		pollInsertCache[key] = cache
		pollInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Poll.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Poll) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	pollUpdateCacheMut.RLock()
	cache, cached := pollUpdateCache[key]
	pollUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pollColumns,
			pollPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update poll, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"poll\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, pollPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pollType, pollMapping, append(wl, pollPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update poll row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for poll")
	}

	if !cached {
		pollUpdateCacheMut.Lock()
		pollUpdateCache[key] = cache
		pollUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q pollQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for poll")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for poll")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PollSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pollPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"poll\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, pollPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in poll slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all poll")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Poll) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no poll provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(pollColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pollUpsertCacheMut.RLock()
	cache, cached := pollUpsertCache[key]
	pollUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			pollColumns,
			pollColumnsWithDefault,
			pollColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			pollColumns,
			pollPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert poll, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(pollPrimaryKeyColumns))
			copy(conflict, pollPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"poll\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(pollType, pollMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pollType, pollMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert poll")
	}

	if !cached {
		pollUpsertCacheMut.Lock()
		pollUpsertCache[key] = cache
		pollUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Poll record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Poll) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Poll provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pollPrimaryKeyMapping)
	sql := "DELETE FROM \"poll\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from poll")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for poll")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q pollQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no pollQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from poll")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for poll")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PollSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Poll slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pollPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"poll\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pollPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from poll slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for poll")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Poll) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPoll(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PollSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PollSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pollPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"poll\".* FROM \"poll\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pollPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PollSlice")
	}

	*o = slice

	return nil
}

// PollExists checks if the Poll row exists.
func PollExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"poll\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if poll exists")
	}

	return exists, nil
}
